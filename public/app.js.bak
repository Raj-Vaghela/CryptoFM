/**
 * Crypto FM - Cryptocurrency Radio Frontend
 * 
 * This script powers the interactive frontend for the Crypto FM application,
 * a vintage-styled radio interface for cryptocurrency news and information.
 * 
 * Main features:
 * - Volume control via custom slider
 * - Audio player management for streaming content
 * - Cryptocurrency data display and updates
 * - Status indicator management
 * - Touch and mouse event handling
 * 
 * The application follows a modular design pattern with separate concerns for:
 * - UI interaction and updates
 * - Audio playback control
 * - Data fetching and display
 * - Connection status management
 */

// Debugging flag - set to true to enable console logs
const DEBUG = true;

// Log function that only outputs if debugging is enabled
function log(message, data) {
  if (DEBUG) {
    if (data) {
      console.log(`[CryptoFM] ${message}`, data);
    } else {
      console.log(`[CryptoFM] ${message}`);
    }
  }
}

// API endpoints
const API = {
  checkNew: '/api/check-new-segments',
  nextSegment: '/api/next-segment',
  markSpoken: '/api/mark-spoken',
  status: '/api/status'
};

// DOM elements
const elements = {
  audioPlayer: document.getElementById('audioPlayer'),
  volumeHandle: document.getElementById('volumeHandle'),
  transcript: document.getElementById('currentTranscript'),
  tickerTape: document.getElementById('tickerTape')
};

// Application state
const state = {
  volume: 0.7,
  connected: false,
  playing: false,
  currentSegment: null,
  checkInterval: null,
  lastCheck: 0
};

// Initialize the application
function init() {
  log('Initializing Crypto FM application');
  
  // Set up volume control
  setupVolumeControl();
  
  // Initialize the audio player
  setupAudioPlayer();
  
  // Start periodic checks for new content
  startPeriodicChecks();
  
  // Add click handler to force play audio (helps with autoplay issues)
  document.body.addEventListener('click', function() {
    if (!state.playing && elements.audioPlayer.src) {
      log('User interaction detected, trying to play audio');
      playAudio().catch(err => log('Still could not play audio after user interaction', err));
    }
  });
  
  // Log initial state
  log('Initialization complete', { state });
}

// Set up volume control slider
function setupVolumeControl() {
  const sliderTrack = document.querySelector('.slider-track');
  
  // Set initial position
  updateVolumeSlider(state.volume);
  
  // Make volume slider draggable
  let isDragging = false;
  
  elements.volumeHandle.addEventListener('mousedown', () => isDragging = true);
  document.addEventListener('mouseup', () => isDragging = false);
  
  document.addEventListener('mousemove', (e) => {
    if (isDragging) {
      const trackRect = sliderTrack.getBoundingClientRect();
      let position = (e.clientX - trackRect.left) / trackRect.width;
      position = Math.max(0, Math.min(1, position));
      updateVolumeSlider(position);
    }
  });
  
  // Click anywhere on track to set volume
  sliderTrack.addEventListener('click', (e) => {
    const trackRect = sliderTrack.getBoundingClientRect();
    let position = (e.clientX - trackRect.left) / trackRect.width;
    position = Math.max(0, Math.min(1, position));
    updateVolumeSlider(position);
  });
}

// Update volume slider position and set audio volume
function updateVolumeSlider(position) {
  state.volume = position;
  elements.volumeHandle.style.left = `${position * 100}%`;
  
  if (elements.audioPlayer) {
    elements.audioPlayer.volume = position;
    log('Volume updated', { volume: position });
  }
}

// Set up audio player
function setupAudioPlayer() {
  elements.audioPlayer.addEventListener('playing', () => {
    state.playing = true;
    log('Audio playing');
  });
  
  elements.audioPlayer.addEventListener('pause', () => {
    state.playing = false;
    log('Audio paused');
  });
  
  elements.audioPlayer.addEventListener('ended', () => {
    state.playing = false;
    log('Audio ended');
    
    // Mark segment as spoken when finished playing
    if (state.currentSegment) {
      markSegmentAsSpoken(state.currentSegment.id);
    }
    
    // Check for next segment
    checkForNewSegments();
  });
  
  elements.audioPlayer.addEventListener('error', (e) => {
    log('Audio error', { code: elements.audioPlayer.error.code, message: getAudioErrorMessage(elements.audioPlayer.error.code) });
    // Try an alternative approach after error
    setTimeout(checkForNewSegments, 3000);
  });
  
  // Set initial volume
  elements.audioPlayer.volume = state.volume;
}

// Get human-readable error message for audio error codes
function getAudioErrorMessage(code) {
  const messages = {
    1: 'The fetching process was aborted by the user',
    2: 'Network error occurred while fetching the audio',
    3: 'There was an error decoding the audio file',
    4: 'Audio not supported by the browser'
  };
  return messages[code] || 'Unknown error';
}

// Start periodic checks for new content
function startPeriodicChecks() {
  log('Starting periodic checks for new content');
  
  // Initial check
  checkForNewSegments();
  
  // Set up regular checks
  state.checkInterval = setInterval(checkForNewSegments, 5000);
}

// Check for new segments
function checkForNewSegments() {
  // Prevent too frequent checks
  const now = Date.now();
  if (now - state.lastCheck < 3000) {
    return;
  }
  state.lastCheck = now;
  
  log('Checking for new segments');
  
  fetch(API.checkNew)
    .then(response => response.json())
    .then(data => {
      log('Check response', data);
      state.connected = true;
      
      if (data.newContent && !state.playing) {
        getNextSegment();
      }
    })
    .catch(error => {
      log('Error checking for new segments', error);
      state.connected = false;
    });
}

// Get the next segment to speak
function getNextSegment() {
  log('Getting next segment');
  
  fetch(API.nextSegment)
    .then(response => response.json())
    .then(data => {
      log('Next segment response', data);
      
      if (data.hasSegment) {
        state.currentSegment = data;
        
        // Update transcript
        if (elements.transcript && data.text) {
          elements.transcript.textContent = data.text;
          elements.transcript.parentElement.style.display = 'block';
        }
        
        // Play audio if available
        if (data.audioUrl) {
          playSegmentAudio(data.audioUrl);
        } else {
          log('No audio URL in segment');
          // Mark as spoken and check for next
          markSegmentAsSpoken(data.id);
          setTimeout(checkForNewSegments, 1000);
        }
      }
    })
    .catch(error => {
      log('Error getting next segment', error);
      setTimeout(checkForNewSegments, 5000);
    });
}

// Play segment audio
function playSegmentAudio(url) {
  log('Setting up audio for playback', { url });
  
  // Reset audio player
  elements.audioPlayer.pause();
  elements.audioPlayer.currentTime = 0;
  
  // Set new source
  elements.audioPlayer.src = url;
  
  // Load and play
  elements.audioPlayer.load();
  playAudio();
}

// Play audio with error handling
function playAudio() {
  log('Attempting to play audio');
  
  return elements.audioPlayer.play()
    .then(() => {
      log('Audio playback started successfully');
      return true;
    })
    .catch(error => {
      log('Error playing audio', error);
      
      // Handle autoplay restrictions
      if (error.name === 'NotAllowedError') {
        log('Autoplay prevented - waiting for user interaction');
        showAutoplayMessage();
      }
      
      return false;
    });
}

// Show message about autoplay being blocked
function showAutoplayMessage() {
  const message = document.createElement('div');
  message.className = 'autoplay-message';
  message.innerHTML = `
    <div class="alert alert-warning">
      <i class="fas fa-volume-mute me-2"></i>
      <strong>Audio Blocked:</strong> Click anywhere to enable audio playback
      <button type="button" class="btn-close ms-3" aria-label="Close"></button>
    </div>
  `;
  
  // Add close button functionality
  message.querySelector('.btn-close').addEventListener('click', (e) => {
    e.stopPropagation();
    message.remove();
  });
  
  // Add click handler to play audio
  message.addEventListener('click', () => {
    playAudio();
    message.remove();
  });
  
  document.body.appendChild(message);
}

// Mark segment as spoken
function markSegmentAsSpoken(segmentId) {
  if (!segmentId) return;
  
  log('Marking segment as spoken', { id: segmentId });
  
  fetch(API.markSpoken, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ segmentId })
  })
    .then(response => response.json())
    .then(data => {
      log('Mark spoken response', data);
    })
    .catch(error => {
      log('Error marking segment as spoken', error);
    });
}

// Initialize when the DOM is fully loaded
document.addEventListener('DOMContentLoaded', init);

// Export functions for debugging
window.cryptoFM = {
  checkForNewSegments,
  getNextSegment,
  playAudio,
  state
};